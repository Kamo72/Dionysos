{"ast":null,"code":"import { serverRoot } from \"./App\";\nexport class ApiLibrary {\n  constructor() {\n    this.GetThumbData = async videoCode => {\n      let json = await (await fetch(`${serverRoot}/api/video/thumb/${videoCode}`)\n      // await fetch(`${window.location.origin}/api/video/thumb/${videoCode}`)\n      ).json();\n      return json;\n    };\n    this.GetViewData = async videoCode => {\n      console.log(\"requesting GetViewData as \" + videoCode);\n      let json = await (await fetch(`${serverRoot}/api/video/view/${videoCode}`)\n      // await fetch(`${window.location.origin}/api/video/thumb/${videoCode}`)\n      ).json();\n      return json;\n    };\n  }\n}\nexport class CookieLibrary {\n  constructor() {\n    this.getCookieValue = name => {\n      // document.cookie 문자열에서 각 쿠키를 세미콜론으로 분리\n      const cookies = document.cookie.split(';');\n\n      // 각 쿠키를 순회하며 원하는 쿠키를 찾음\n      for (let cookie of cookies) {\n        // 쿠키 앞뒤의 공백을 제거\n        cookie = cookie.trim();\n\n        // 쿠키 이름과 값으로 분리\n        const [cookieName, cookieValue] = cookie.split('=');\n\n        // 원하는 쿠키 이름과 일치하면 값을 반환\n        if (cookieName === name) {\n          return cookieValue;\n        }\n      }\n\n      // 원하는 쿠키를 찾지 못했을 경우 null 반환\n      return null;\n    };\n  }\n}","map":{"version":3,"names":["serverRoot","ApiLibrary","constructor","GetThumbData","videoCode","json","fetch","GetViewData","console","log","CookieLibrary","getCookieValue","name","cookies","document","cookie","split","trim","cookieName","cookieValue"],"sources":["F:/[STS4 Storage]/Dionysos/frontend/src/Library.js"],"sourcesContent":["\r\nimport { serverRoot } from \"./App\";\r\n\r\n\r\nexport class ApiLibrary{\r\n\r\n    GetThumbData = async (videoCode) => {\r\n        \r\n        let json = await (\r\n            await fetch(`${serverRoot}/api/video/thumb/${videoCode}`)\r\n            // await fetch(`${window.location.origin}/api/video/thumb/${videoCode}`)\r\n        ).json();\r\n\r\n        return json\r\n    };\r\n    GetViewData = async (videoCode) => {\r\n        console.log(\"requesting GetViewData as \" + videoCode);\r\n        let json = await (\r\n            await fetch(`${serverRoot}/api/video/view/${videoCode}`)\r\n            // await fetch(`${window.location.origin}/api/video/thumb/${videoCode}`)\r\n        ).json();\r\n\r\n        return json\r\n    };\r\n}\r\n\r\n\r\n\r\nexport class CookieLibrary{\r\n    getCookieValue = (name) => {\r\n        // document.cookie 문자열에서 각 쿠키를 세미콜론으로 분리\r\n        const cookies = document.cookie.split(';');\r\n        \r\n        // 각 쿠키를 순회하며 원하는 쿠키를 찾음\r\n        for (let cookie of cookies) {\r\n            // 쿠키 앞뒤의 공백을 제거\r\n            cookie = cookie.trim();\r\n            \r\n            // 쿠키 이름과 값으로 분리\r\n            const [cookieName, cookieValue] = cookie.split('=');\r\n            \r\n            // 원하는 쿠키 이름과 일치하면 값을 반환\r\n            if (cookieName === name) {\r\n                return cookieValue;\r\n            }\r\n        }\r\n        \r\n        // 원하는 쿠키를 찾지 못했을 경우 null 반환\r\n        return null;\r\n    }\r\n\r\n}"],"mappings":"AACA,SAASA,UAAU,QAAQ,OAAO;AAGlC,OAAO,MAAMC,UAAU;EAAAC,YAAA;IAAA,KAEnBC,YAAY,GAAG,MAAOC,SAAS,IAAK;MAEhC,IAAIC,IAAI,GAAG,MAAM,CACb,MAAMC,KAAK,CAAE,GAAEN,UAAW,oBAAmBI,SAAU,EAAC;MACxD;MAAA,EACFC,IAAI,CAAC,CAAC;MAER,OAAOA,IAAI;IACf,CAAC;IAAA,KACDE,WAAW,GAAG,MAAOH,SAAS,IAAK;MAC/BI,OAAO,CAACC,GAAG,CAAC,4BAA4B,GAAGL,SAAS,CAAC;MACrD,IAAIC,IAAI,GAAG,MAAM,CACb,MAAMC,KAAK,CAAE,GAAEN,UAAW,mBAAkBI,SAAU,EAAC;MACvD;MAAA,EACFC,IAAI,CAAC,CAAC;MAER,OAAOA,IAAI;IACf,CAAC;EAAA;AACL;AAIA,OAAO,MAAMK,aAAa;EAAAR,YAAA;IAAA,KACtBS,cAAc,GAAIC,IAAI,IAAK;MACvB;MACA,MAAMC,OAAO,GAAGC,QAAQ,CAACC,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC;;MAE1C;MACA,KAAK,IAAID,MAAM,IAAIF,OAAO,EAAE;QACxB;QACAE,MAAM,GAAGA,MAAM,CAACE,IAAI,CAAC,CAAC;;QAEtB;QACA,MAAM,CAACC,UAAU,EAAEC,WAAW,CAAC,GAAGJ,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC;;QAEnD;QACA,IAAIE,UAAU,KAAKN,IAAI,EAAE;UACrB,OAAOO,WAAW;QACtB;MACJ;;MAEA;MACA,OAAO,IAAI;IACf,CAAC;EAAA;AAEL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}