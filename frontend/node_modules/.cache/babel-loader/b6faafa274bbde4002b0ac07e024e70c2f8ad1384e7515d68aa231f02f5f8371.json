{"ast":null,"code":"import { serverRoot } from \"./App\";\nexport class ApiLibrary {\n  constructor() {\n    this.GetThumbData = async videoCode => {\n      let json = await (await fetch(`${serverRoot}/api/video/thumb/${videoCode}`)\n      // await fetch(`${window.location.origin}/api/video/thumb/${videoCode}`)\n      ).json();\n      return json;\n    };\n    this.GetViewData = async videoCode => {\n      console.log(\"requesting GetViewData as \" + videoCode);\n      let json = await (await fetch(`${serverRoot}/api/video/view/${videoCode}`)\n      // await fetch(`${window.location.origin}/api/video/thumb/${videoCode}`)\n      ).json();\n      return json;\n    };\n    this.GetProfileBasic = async userCode => {\n      console.log(\"requesting GetProfileBasic as \" + userCode);\n      let json = await (await fetch(`${serverRoot}/api/channel/basic/${userCode}`)\n      // await fetch(`${window.location.origin}/api/video/thumb/${videoCode}`)\n      ).json();\n      return json;\n    };\n    this.GetSearchData = async keyword => {\n      console.log(\"requesting GetSearchData as \" + keyword);\n      let json = await (await fetch(`${serverRoot}/api/video/search/${keyword}`)\n      // await fetch(`${window.location.origin}/api/video/thumb/${videoCode}`)\n      ).json();\n      return json;\n    };\n  }\n}\nexport class CookieLibrary {\n  constructor() {\n    this.GetCookieUserId = () => {\n      return this.GetCookieValue(\"userId\");\n    };\n    this.GetCookieValue = name => {\n      // document.cookie 문자열에서 각 쿠키를 세미콜론으로 분리\n      const cookies = document.cookie.split(';');\n\n      // 각 쿠키를 순회하며 원하는 쿠키를 찾음\n      for (let cookie of cookies) {\n        // 쿠키 앞뒤의 공백을 제거\n        cookie = cookie.trim();\n\n        // 쿠키 이름과 값으로 분리\n        const [cookieName, cookieValue] = cookie.split('=');\n\n        // 원하는 쿠키 이름과 일치하면 값을 반환\n        if (cookieName.trim() === name) {\n          return decodeURIComponent(cookieValue); // 쿠키 값 디코딩 후 반환\n        }\n      }\n\n      // 원하는 쿠키를 찾지 못했을 경우 null 반환\n      return null;\n    };\n    this.GetAllCookies = () => {\n      const cookies = document.cookie.split(';');\n      const cookieMap = {};\n      for (let cookie of cookies) {\n        const [name, value] = cookie.trim().split('=');\n        cookieMap[name] = decodeURIComponent(value);\n      }\n      return cookieMap;\n    };\n  }\n}","map":{"version":3,"names":["serverRoot","ApiLibrary","constructor","GetThumbData","videoCode","json","fetch","GetViewData","console","log","GetProfileBasic","userCode","GetSearchData","keyword","CookieLibrary","GetCookieUserId","GetCookieValue","name","cookies","document","cookie","split","trim","cookieName","cookieValue","decodeURIComponent","GetAllCookies","cookieMap","value"],"sources":["F:/[STS4 Storage]/Dionysos/frontend/src/Library.js"],"sourcesContent":["\r\nimport { serverRoot } from \"./App\";\r\n\r\n\r\nexport class ApiLibrary{\r\n\r\n    GetThumbData = async (videoCode) => {\r\n        \r\n        let json = await (\r\n            await fetch(`${serverRoot}/api/video/thumb/${videoCode}`)\r\n            // await fetch(`${window.location.origin}/api/video/thumb/${videoCode}`)\r\n        ).json();\r\n\r\n        return json\r\n    };\r\n    GetViewData = async (videoCode) => {\r\n        console.log(\"requesting GetViewData as \" + videoCode);\r\n        let json = await (\r\n            await fetch(`${serverRoot}/api/video/view/${videoCode}`)\r\n            // await fetch(`${window.location.origin}/api/video/thumb/${videoCode}`)\r\n        ).json();\r\n\r\n        return json\r\n    };\r\n\r\n\r\n    GetProfileBasic = async (userCode) => {\r\n        console.log(\"requesting GetProfileBasic as \" + userCode);\r\n        let json = await (\r\n            await fetch(`${serverRoot}/api/channel/basic/${userCode}`)\r\n            // await fetch(`${window.location.origin}/api/video/thumb/${videoCode}`)\r\n        ).json();\r\n\r\n        return json\r\n    };\r\n\r\n    \r\n\r\n    GetSearchData = async (keyword) => {\r\n        console.log(\"requesting GetSearchData as \" + keyword);\r\n        let json = await (\r\n            await fetch(`${serverRoot}/api/video/search/${keyword}`)\r\n            // await fetch(`${window.location.origin}/api/video/thumb/${videoCode}`)\r\n        ).json();\r\n\r\n        return json\r\n    };\r\n}\r\n\r\n\r\n\r\nexport class CookieLibrary{\r\n\r\n    GetCookieUserId = ()=>\r\n    {\r\n        return this.GetCookieValue(\"userId\");\r\n    }\r\n\r\n    GetCookieValue = (name) => {\r\n        // document.cookie 문자열에서 각 쿠키를 세미콜론으로 분리\r\n        const cookies = document.cookie.split(';');\r\n        \r\n        // 각 쿠키를 순회하며 원하는 쿠키를 찾음\r\n        for (let cookie of cookies) {\r\n            // 쿠키 앞뒤의 공백을 제거\r\n            cookie = cookie.trim();\r\n            \r\n            // 쿠키 이름과 값으로 분리\r\n            const [cookieName, cookieValue] = cookie.split('=');\r\n            \r\n            // 원하는 쿠키 이름과 일치하면 값을 반환\r\n            if (cookieName.trim() === name) {\r\n                return decodeURIComponent(cookieValue); // 쿠키 값 디코딩 후 반환\r\n            }\r\n        }\r\n        \r\n        // 원하는 쿠키를 찾지 못했을 경우 null 반환\r\n        return null;\r\n    }\r\n    \r\n    GetAllCookies = () => {\r\n        const cookies = document.cookie.split(';');\r\n        const cookieMap = {};\r\n    \r\n        for (let cookie of cookies) {\r\n            const [name, value] = cookie.trim().split('=');\r\n            cookieMap[name] = decodeURIComponent(value);\r\n        }\r\n    \r\n        return cookieMap;\r\n    }\r\n}"],"mappings":"AACA,SAASA,UAAU,QAAQ,OAAO;AAGlC,OAAO,MAAMC,UAAU;EAAAC,YAAA;IAAA,KAEnBC,YAAY,GAAG,MAAOC,SAAS,IAAK;MAEhC,IAAIC,IAAI,GAAG,MAAM,CACb,MAAMC,KAAK,CAAE,GAAEN,UAAW,oBAAmBI,SAAU,EAAC;MACxD;MAAA,EACFC,IAAI,CAAC,CAAC;MAER,OAAOA,IAAI;IACf,CAAC;IAAA,KACDE,WAAW,GAAG,MAAOH,SAAS,IAAK;MAC/BI,OAAO,CAACC,GAAG,CAAC,4BAA4B,GAAGL,SAAS,CAAC;MACrD,IAAIC,IAAI,GAAG,MAAM,CACb,MAAMC,KAAK,CAAE,GAAEN,UAAW,mBAAkBI,SAAU,EAAC;MACvD;MAAA,EACFC,IAAI,CAAC,CAAC;MAER,OAAOA,IAAI;IACf,CAAC;IAAA,KAGDK,eAAe,GAAG,MAAOC,QAAQ,IAAK;MAClCH,OAAO,CAACC,GAAG,CAAC,gCAAgC,GAAGE,QAAQ,CAAC;MACxD,IAAIN,IAAI,GAAG,MAAM,CACb,MAAMC,KAAK,CAAE,GAAEN,UAAW,sBAAqBW,QAAS,EAAC;MACzD;MAAA,EACFN,IAAI,CAAC,CAAC;MAER,OAAOA,IAAI;IACf,CAAC;IAAA,KAIDO,aAAa,GAAG,MAAOC,OAAO,IAAK;MAC/BL,OAAO,CAACC,GAAG,CAAC,8BAA8B,GAAGI,OAAO,CAAC;MACrD,IAAIR,IAAI,GAAG,MAAM,CACb,MAAMC,KAAK,CAAE,GAAEN,UAAW,qBAAoBa,OAAQ,EAAC;MACvD;MAAA,EACFR,IAAI,CAAC,CAAC;MAER,OAAOA,IAAI;IACf,CAAC;EAAA;AACL;AAIA,OAAO,MAAMS,aAAa;EAAAZ,YAAA;IAAA,KAEtBa,eAAe,GAAG,MAClB;MACI,OAAO,IAAI,CAACC,cAAc,CAAC,QAAQ,CAAC;IACxC,CAAC;IAAA,KAEDA,cAAc,GAAIC,IAAI,IAAK;MACvB;MACA,MAAMC,OAAO,GAAGC,QAAQ,CAACC,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC;;MAE1C;MACA,KAAK,IAAID,MAAM,IAAIF,OAAO,EAAE;QACxB;QACAE,MAAM,GAAGA,MAAM,CAACE,IAAI,CAAC,CAAC;;QAEtB;QACA,MAAM,CAACC,UAAU,EAAEC,WAAW,CAAC,GAAGJ,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC;;QAEnD;QACA,IAAIE,UAAU,CAACD,IAAI,CAAC,CAAC,KAAKL,IAAI,EAAE;UAC5B,OAAOQ,kBAAkB,CAACD,WAAW,CAAC,CAAC,CAAC;QAC5C;MACJ;;MAEA;MACA,OAAO,IAAI;IACf,CAAC;IAAA,KAEDE,aAAa,GAAG,MAAM;MAClB,MAAMR,OAAO,GAAGC,QAAQ,CAACC,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC;MAC1C,MAAMM,SAAS,GAAG,CAAC,CAAC;MAEpB,KAAK,IAAIP,MAAM,IAAIF,OAAO,EAAE;QACxB,MAAM,CAACD,IAAI,EAAEW,KAAK,CAAC,GAAGR,MAAM,CAACE,IAAI,CAAC,CAAC,CAACD,KAAK,CAAC,GAAG,CAAC;QAC9CM,SAAS,CAACV,IAAI,CAAC,GAAGQ,kBAAkB,CAACG,KAAK,CAAC;MAC/C;MAEA,OAAOD,SAAS;IACpB,CAAC;EAAA;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}